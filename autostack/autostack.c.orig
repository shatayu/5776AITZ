task autostackUp() {
	autostack_state.stacked = false;

	// stop any prior lift tasks
	stopTask(nb_vbar_task);
	stopTask(nb_vbar_PID_task);
	stopTask(nb_lift_task);
	stopTask(nb_lift_PID_task);

	// claw stall
	b_cone_intake(20);

	// bring top lift to intermediary height
	// start by powering max
	nb_vbar(1300, 127, 4000);

	// then PI to exact intermediary height
	nb_vbar_PID(1500,127,4000);

	// lift to desired height
	lift.target = autostack_state.maxHeight;
	lift.power = 70;
	lift.timeout = 4000;
	//*
	if (lift.target > 1660) { // if small height PI too slow so autonMainLift used
		nb_lift_PID(autostack_state.maxHeight, 70, 4000);
	} else {
		nb_lift(autostack_state.maxHeight, 70, 4000);
	}


	// after the lift has risen a certain amount begin raising vbar to max height
	waitUntil(SensorValue[MainLiftPot] < autostack_state.maxHeight - 400);

	stopTask(nb_vbar_task);
	stopTask(nb_vbar_task);


	nb_vbar(2750, 127, 4000);
	while (SensorValue[TopLiftPot] < 2750)
		wait1Msec(20);
	b_lift(20);

	// open claw at the end
<<<<<<< HEAD
	stopTask(nb_vbar_task);
	stopTask(nb_vbar_PID_task);
	b_cone_intake(50);
	coneIntake.target = OPEN;
	b_lift(-127);
	wait1Msec(200);
	b_lift(0);
	nb_cone_intake(OPEN);
=======
	stopTask(mainLiftPI);
	stopTask(autonMainLift);
	moveConeIntake(50);
	coneIntake.state = OPEN;
	if (SensorValue[MainLiftPot] > 1500) {
		moveMainLift(-127);
		wait1Msec(200);
		moveMainLift(0);
	}

	if (a.maxHeight == 1320) {
		wait1Msec(350);
	}
	startTask(autonConeIntake);
>>>>>>> ac05fd548da3e177ae481cff3779b8fb3711cab7
	wait1Msec(100);
	b_lift(127);
	waitUntil(SensorValue[MainLiftPot] > autostack_state.maxHeight);
	b_lift(0);
	// flag that cone is stacked
	autostack_state.stacked = true;
}



task fieldReset() {
	b_cone_intake(-15);

	// bring top lift down
	if (autostack_state.maxHeight > 1500) {
		nb_vbar_PID(1530, 127, 1000);
	} else {
		nb_vbar(1530, 127, 1000);
	}


	// bring main lift down when top lift is sufficiently far
	waitUntil(SensorValue[TopLiftPot] > 1530);

	stopTask(nb_vbar_PID_task);
	nb_lift(1300, 70, 1500);
	if (SensorValue[MainLiftPot] > 1700)
		wait1Msec(300);
	lift.power = 127;

	// bring top lift in when main lift is sufficiently far down
	while (SensorValue[MainLiftPot] > lift.target + 400)
		wait1Msec(20);

	stopTask(nb_vbar_PID_task);
	b_vbar(-127);
	wait1Msec(500);
	autostack_state.stacked = false;
}

task matchReset() {
	b_cone_intake(-15);

	// bring vbar down
	nb_vbar(1530, 127, 1000)

	// bring main lift down when top lift is sufficiently far
	waitUntil (SensorValue[TopLiftPot] > vbar.target);

	nb_lift(1570, 127, 3000);


	waitUntil (SensorValue[MainLiftPot] > lift.target);

	autostack_state.stacked = false;
}

void autostackTaskReset() {
		// stop all tasks relating to autostack
	stopTask(autostackUp);
	stopTask(fieldReset);
	stopTask(matchReset);
	stopTask(nb_lift_task);
	stopTask(nb_lift_task);
	stopTask(nb_vbar_task);
	stopTask(nb_vbar_PID_task);
	stopTask(nb_cone_intake_task);

	// ensure no motors are moving
	b_lift(0);
	b_vbar(0);
	b_cone_intake(-15);
}

void abortAutostack() {
	// stop all tasks relating to autostack
	autostackTaskReset();

	// stops waits
	autostack_state.stacked = true;
	wait1Msec(100);
	autostack_state.stacked = false;
}

bool FIELD = true;
bool MATCH = false;

void autostack(int conesOnMogo, bool reset) {
	// set height to stack cone
	switch(conesOnMogo) {
		case 0:
			autostack_state.maxHeight = 1320;
			break;
		case 1:
			autostack_state.maxHeight = 1420;
			break;
		case 2:
			autostack_state.maxHeight = 1550;
			break;
		case 3:
			autostack_state.maxHeight = 1670;
			break;
		case 4:
			autostack_state.maxHeight = 1920;
			break;
		case 5:
			autostack_state.maxHeight = 2070;
			break;
		case 6:
			autostack_state.maxHeight = 2140;
			break;
		case 7:
			autostack_state.maxHeight = 2280;
			break;
		case 8:
			autostack_state.maxHeight = 2410;
			break;
		case 9:
			autostack_state.maxHeight = 2510;
			break;
		case 10:
			autostack_state.maxHeight = 2640;
			break;
		case 11:
			autostack_state.maxHeight = 2900;
			break;
		case 12:
			autostack_state.maxHeight = 3050;
			break;
		default:
			autostack_state.maxHeight = 3050;
	}
	// autostack
	startTask(autostackUp);
	while (autostack_state.stacked == false)
		wait1Msec(20);
	wait1Msec(100);

// ensure no task carries over to reset
	autostackTaskReset();
	// reset
	if (reset == FIELD) {
		startTask(fieldReset);
		while (autostack_state.stacked == true)
			wait1Msec(20);
	} else {
		startTask(matchReset);
	}
}

task autonStack() {
	// autostack up
	autostack_state.maxHeight = 1450;

	startTask(autostackUp);
	while (autostack_state.stacked == false)
		wait1Msec(20);
	//autostackTaskReset();
}

task autonReset() {
	// field reset
	startTask(fieldReset);

	// wait
	while (autostack_state.stacked == true)
		wait1Msec(20);

	// ensure no task carries over to drive
	abortAutostack();
}
